#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
SQLite python
http://zetcode.com/db/sqlitepythontutorial/
"""

#-----------------------#
# Imports				#
#-----------------------#

import sys

from optparse import OptionParser

import sqlite3 as lite

#-----------------------#
# Variables				#
#-----------------------#

usageString = "Usage: %prog [options]"
parser = OptionParser(usage=usageString)

parser.add_option("-d", "--database", dest="database", metavar="DATABASE", type="string", 
	help="SQLite database in which to insert values")
parser.add_option("-u", "--user", dest="user", metavar="USER", type="string", 
	help="User for the SQLite database")
parser.add_option("-p", "--password", dest="password", metavar="PASSWORD", type="string", 
	help="Password for the user of the SQLite database")
parser.add_option("-t", "--tablename", dest="tablename", metavar="TABLENAME", type="string", 
	help="Table name to use in the SQLite database")

(options,args) = parser.parse_args()

# more input then expected
if len(args) > 0:
	parser.error("Invalid additional option(s). Check -h or --help")

# variables
database = options.database
user = options.user
password = options.password
tablename = options.tablename

# check that has all necessary values
if not database and not user and not password and not tablename:
	parser.error("Missing options")
if not database :
	parser.error("Missing database")
if not user :
	parser.error("Missing user")
if not password :
	parser.error("Missing password")
if not tablename :
	parser.error("Missing tablename")

#-----------------------#
# Objects				#
#-----------------------#

# This table contains : ELEMENT of type INT
class table :
	# initialise table
	def __init__(self, database, user, password, tablename):
		self.database = database
		self.tablename = tablename
		self.user = user
		self.password = password
		# create table and delete previous existing table with same name
		connection = self.connect()
		with connection:
			cursor = connection.cursor()
			cursor.execute("DROP TABLE IF EXISTS %s" %self.table)
		connection.close()

	# interface to connect to the database
	def connect(self) :


	# add a new element to the table
	def add_element(self, ELEMENT) :


	# returns a list containint the table elements
	def get_table_elements(self) :


	# check if the table contains a given element
	def element_exists(self, ELEMENT) :


#-----------------------#
# Main					#
#-----------------------#

# set global values (after declared objects)
table_object = table(database, tablename, user, password)

def main():
	pass

#-----------------------#
# Run Main				#
#-----------------------#

if __name__ == '__main__':
	main()
